{"version":3,"sources":["reducer.js","component/Auth/PrivateRoute.js","App.js","serviceWorker.js","index.js","context.js","assets/404.webp"],"names":["reducer","state","type","payload","currentUser","isAuth","currentPin","draft","latitude","longitude","pins","newPin","prevPins","filter","pin","_id","console","log","deletePin","tmp","updatedPin","tmp2","map","PrivateRoute","Component","component","rest","useContext","context","render","props","to","Home","lazy","Login","url","window","location","hostname","wsLink","WebSocketLink","uri","options","reconnect","client","ApolloClient","link","cache","InMemoryCache","NoMatchPage","className","align","loading","style","height","src","NotFound","alt","href","App","initialState","useReducer","dispatch","Provider","value","fallback","CircularProgress","color","exact","path","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","createContext","module","exports"],"mappings":"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","file":"static/js/main.2910172d.chunk.js","sourcesContent":["export default function reducer(state, { type, payload }) {\n  switch (type) {\n    case \"LOGIN_USER\":\n      return {\n        ...state,\n        currentUser: payload,\n      };\n    case \"IS_LOGGED_IN\":\n      return {\n        ...state,\n        isAuth: payload,\n      };\n    case \"SIGNOUT_USER\":\n      return {\n        ...state,\n        currentUser: null,\n        isAuth: false,\n      };\n    case \"CREATE_DRAFT\":\n      return {\n        ...state,\n        currentPin: null,\n        draft: {\n          latitude: 0,\n          longitude: 0,\n        },\n      };\n    case \"UPDATE_DRAFT_LOCATION\":\n      return {\n        ...state,\n        draft: payload,\n      };\n    case \"DELETE_DRAFT\":\n      return {\n        ...state,\n        draft: null,\n      };\n    case \"GET_PINS\":\n      return {\n        ...state,\n        pins: payload,\n      };\n    case \"CREATE_PIN\":\n      const newPin = payload;\n      const prevPins = state.pins.filter((pin) => pin._id !== newPin._id);\n      console.log(prevPins, newPin);\n      return {\n        ...state,\n        pins: [...prevPins, newPin],\n      };\n    case \"SET_PIN\":\n      return {\n        ...state,\n        currentPin: payload,\n        draft: null,\n      };\n    case \"DELETE_PIN\":\n      const deletePin = payload;\n      const tmp = state.pins.filter((pin) => pin._id !== deletePin._id);\n      if (state.currentPin) {\n        const isCurrentPin = deletePin._id === state.currentPin._id;\n        if (isCurrentPin) {\n          return {\n            ...state,\n            pins: [...tmp],\n            currentPin: null,\n          };\n        }\n      }\n      return {\n        ...state,\n        pins: [...tmp],\n      };\n\n    case \"CREATE_COMMENT\":\n      let updatedPin = payload;\n      //find and replace\n      let tmp2 = state.pins.map((pin) =>\n        pin._id === updatedPin._id ? updatedPin : pin\n      );\n      console.log(updatedPin, tmp2);\n      return {\n        ...state,\n        pins: tmp2,\n        currentPin: updatedPin,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport context from \"../../context\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const { state } = useContext(context);\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        state.isAuth === false ? (\n          <Redirect to=\"/login\" />\n        ) : (\n          <Component {...props} />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { Suspense, lazy, useContext, useReducer } from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport context from \"./context\";\nimport reducer from \"./reducer\";\nimport PrivateRoute from \"./component/Auth/PrivateRoute\";\nimport { ApolloProvider, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport NotFound from \"./assets/404.webp\";\n\nconst Home = lazy(() => import(\"./component/Home\"));\nconst Login = lazy(() => import(\"./component/Auth/Login\"));\n\nlet url =\n  window.location.hostname === \"localhost\"\n    ? \"ws://localhost:8000/graphql\"\n    : `wss://${window.location.hostname}/graphql`;\n\nconst wsLink = new WebSocketLink({\n  uri: url,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst client = new ApolloClient({\n  link: wsLink,\n  cache: new InMemoryCache(),\n});\n\nconst NoMatchPage = () => {\n  return (\n    <div className=\"container-fluid\" align=\"center\">\n      <img loading=\"lazy\" style={{ height: \"80vh\" }} src={NotFound} alt=\"404\" />\n      <h5>\n        The page you are looking for does not exist, <a href=\"/\">click here</a>{\" \"}\n        to go to the homepage.\n      </h5>\n    </div>\n  );\n};\n\nconst App = () => {\n  const initialState = useContext(context);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <context.Provider value={{ state, dispatch }}>\n          <Switch>\n            <Suspense fallback={<CircularProgress color=\"primary\" />}>\n              <PrivateRoute exact path=\"/\" component={Home} />\n              <Route path=\"/login\" component={Login} />\n              <Route component={NoMatchPage} />\n            </Suspense>\n          </Switch>\n        </context.Provider>\n      </ApolloProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n","import { createContext } from \"react\";\n\nconst context = createContext({\n  currentUser: null,\n  isAuth: false,\n  draft: null,\n  pins: [],\n  currentPin: null,\n});\n\nexport default context;\n","module.exports = __webpack_public_path__ + \"static/media/404.3a0396ed.webp\";"],"sourceRoot":""}